import { createApp } from 'vue/dist/vue.esm-browser.prod.js';
import hljs from 'highlight.js';
import { parsePhp } from './shared';


var cptModal;

var has_mounted = false;

let vueApp = createApp({
    delimiters: ['[[', ']]'],
    data() {
        return {
            excerpt_length: 100,
            guest_class: "guest",
            cpt: [],
            cpt_i: null,
            cpt_show_advanced: false,
            enable: {
                "post-thumbnails": true,
                "menus": true,
                "styleselect": false,
            },
            disable: {
                "editor": true,
                "customizer": false,
                "gutenberg": false,
            },
            options_pages: [],
            options_pages_field: "",
            menu_locations: { "main-nav": "Main Nav" },
            menu_locations_field: ["", ""],
            dashicons: [],
            /*
            Generated by running this JS in inspect element on https://developer.wordpress.org/reference/functions/get_post_type_labels/
            [...jQuery("section > ul")[0].children].map(el => ({
                "key": el.innerText.split(" – ")[0],
                "desc": el.innerText.split(" – ")[1].split(" Default is ")[0],
                "default": (/Default is \‘([^’]+)\’/gm.exec(el.innerText) ?? [null,null])[1],
            }))
            */
            available_labels: [
                {
                    "key": "name",
                    "desc": "General name for the post type, usually plural. The same and overridden by $post_type_object->label.",
                    "default": "Posts"
                },
                {
                    "key": "singular_name",
                    "desc": "Name for one object of this post type.",
                    "default": "Post"
                },
                {
                    "key": "add_new",
                    "desc": "Default is ‘Add New’ for both hierarchical and non-hierarchical types.",
                    "default": "Add New"
                },
                {
                    "key": "add_new_item",
                    "desc": "Label for adding a new singular item.",
                    "default": "Add New Post"
                },
                {
                    "key": "edit_item",
                    "desc": "Label for editing a singular item.",
                    "default": "Edit Post"
                },
                {
                    "key": "new_item",
                    "desc": "Label for the new item page title.",
                    "default": "New Post"
                },
                {
                    "key": "view_item",
                    "desc": "Label for viewing a singular item.",
                    "default": "View Post"
                },
                {
                    "key": "view_items",
                    "desc": "Label for viewing post type archives.",
                    "default": "View Posts"
                },
                {
                    "key": "search_items",
                    "desc": "Label for searching plural items.",
                    "default": "Search Posts"
                },
                {
                    "key": "not_found",
                    "desc": "Label used when no items are found.",
                    "default": "No posts found"
                },
                {
                    "key": "not_found_in_trash",
                    "desc": "Label used when no items are in the Trash.",
                    "default": "No posts found in Trash"
                },
                {
                    "key": "parent_item_colon",
                    "desc": "Label used to prefix parents of hierarchical items. Not used on non-hierarchical post types.",
                    "default": "Parent Page:"
                },
                {
                    "key": "all_items",
                    "desc": "Label to signify all items in a submenu link.",
                    "default": "All Posts"
                },
                {
                    "key": "archives",
                    "desc": "Label for archives in nav menus.",
                    "default": "Post Archives"
                },
                {
                    "key": "attributes",
                    "desc": "Label for the attributes meta box.",
                    "default": "Post Attributes"
                },
                {
                    "key": "insert_into_item",
                    "desc": "Label for the media frame button.",
                    "default": "Insert into post"
                },
                {
                    "key": "uploaded_to_this_item",
                    "desc": "Label for the media frame filter.",
                    "default": "Uploaded to this post"
                },
                {
                    "key": "featured_image",
                    "desc": "Label for the featured image meta box title.",
                    "default": "Featured image"
                },
                {
                    "key": "set_featured_image",
                    "desc": "Label for setting the featured image.",
                    "default": "Set featured image"
                },
                {
                    "key": "remove_featured_image",
                    "desc": "Label for removing the featured image.",
                    "default": "Remove featured image"
                },
                {
                    "key": "use_featured_image",
                    "desc": "Label in the media frame for using a featured image.",
                    "default": "Use as featured image"
                },
                {
                    "key": "menu_name",
                    "desc": "Label for the menu name. Default is same as name.",
                    "default": null
                },
                {
                    "key": "filter_items_list",
                    "desc": "Label for the table views hidden heading.",
                    "default": "Filter posts list"
                },
                {
                    "key": "filter_by_date",
                    "desc": "Label for the date filter in list tables.",
                    "default": "Filter by date"
                },
                {
                    "key": "items_list_navigation",
                    "desc": "Label for the table pagination hidden heading.",
                    "default": "Posts list navigation"
                },
                {
                    "key": "items_list",
                    "desc": "Label for the table hidden heading.",
                    "default": "Posts list"
                },
                {
                    "key": "item_published",
                    "desc": "Label used when an item is published.",
                    "default": "Post published."
                },
                {
                    "key": "item_published_privately",
                    "desc": "Label used when an item is published with private visibility.\nDefault is ‘Post published privately.’ / ‘Page published privately.’",
                    "default": "Post published privately."
                },
                {
                    "key": "item_reverted_to_draft",
                    "desc": "Label used when an item is switched to a draft.\nDefault is ‘Post reverted to draft.’ / ‘Page reverted to draft.’",
                    "default": "Post reverted to draft."
                },
                {
                    "key": "item_scheduled",
                    "desc": "Label used when an item is scheduled for publishing.",
                    "default": "Post scheduled."
                },
                {
                    "key": "item_updated",
                    "desc": "Label used when an item is updated.",
                    "default": "Post updated."
                },
                {
                    "key": "item_link",
                    "desc": "Title for a navigation link block variation.",
                    "default": "Post Link"
                },
                {
                    "key": "item_link_description",
                    "desc": "Description for a navigation link block variation.",
                    "default": "A link to a post."
                }
            ]
        }
    },
    async mounted() {
        // Check for saved state
        let save = window.localStorage.getItem("config-generator-data")
        if (save) {
            let parsed = JSON.parse(save)
            for (let key in parsed) {
                console.log(parsed[key])
                this[key] = parsed[key]
            }
        }
        // Fetch list of dashicons
        let request = await fetch("https://raw.githubusercontent.com/WordPress/dashicons/master/codepoints.json");
        let json = await request.text();
        this.dashicons = Object.keys(JSON.parse(json))
        // Has mounted
        has_mounted = true;
        document.getElementById('v-config-generator').classList.remove("opacity-0")
        document.getElementById('config-generator-loader').remove()
        cptModal = new bootstrap.Modal('#cpt_modal', {})
    },
    computed: {
        code() {
            // Also take this opportunity to save data to localStorage
            if (has_mounted)
                window.localStorage.setItem("config-generator-data", JSON.stringify({
                    excerpt_length: this.excerpt_length,
                    guest_class: this.guest_class,
                    cpt: this.cpt,
                    cpt_i: this.cpt_i,
                    enable: this.enable,
                    disable: this.disable,
                    options_pages: this.options_pages,
                    menu_locations: this.menu_locations
                }))

            // Use highlight.js to highlight php code
            return hljs.highlight(`<?php
            
return [

    // How many words the WordPress excerpt should be
    "excerpt-length" => ${this.excerpt_length},

    // Append this class to the \`body_class\` list for unauthenticated users
    "guest-class" => "${this.guest_class}",

    // Enable/disable individual WordPress features
    "enable" => ${this.code_list_from_bools(this.enable, 1)},
    "disable" => ${this.code_list_from_bools(this.disable, 1)},

    // Register new menu locations by their name and id
    "menu-locations" => ${this.code_object(this.menu_locations, 1)},

    // Register new options pages by their id
    "options-pages" => ${this.code_list(this.options_pages, 1)},

    // Register new custom post types plus their associated taxonomies and options pages
    "custom-post-types" => ${this.code_list(this.clean_cpts(), 1)},
];
                `, { language: 'php' }).value
        }
    },
    methods: {
        clean_cpts() {
            return this.cpt.map((cpt_val) => {
                pt = JSON.parse(JSON.stringify(cpt_val));
                // Configure rewrite options
                if (pt["options"]["rewrite"] == true) pt["options"]["rewrite"] = pt["options"]["rewrite_opt"]
                delete pt["options"]["rewrite_opt"];
                // Manage Labels
                let labelCount = 0
                for (const key in pt["options"]["labels"]) {
                    if (pt["options"]["labels"][key] == "")
                        delete pt["options"]["labels"][key]
                    else labelCount++
                }
                if (labelCount == 0) delete pt["options"]["labels"]
                return pt;
            })
        },
        code_list(list, ind) {
            if (list.length == 0) return "[]"
            return "[\n" + list.map((v) => {
                var res;
                switch (typeof (v)) {
                    case 'boolean': res = v ? 'true' : 'false'; break;
                    case 'number': res = v; break;
                    case 'string': res = `"${v}"`; break;
                    case 'object': res = v instanceof Array ? this.code_list(v, ind + 1) : this.code_object(v, ind + 1); break;
                    default: res = 'unknown type';
                }
                return "    ".repeat(ind + 1) + `${res}`
            })
                .join(",\n")
                + "\n" + "    ".repeat(ind) + "]"
        },
        code_list_from_bools(obj, ind) {
            let keys = Object.keys(obj).filter(k => obj[k])
            if (keys.length == 0) return "[]"
            return "[\n" + keys.map(k => "    ".repeat(ind + 1) + `"${k}"`)
                .join(",\n")
                + "\n" + "    ".repeat(ind) + "]"
        },
        code_object(obj, ind) {
            let keys = Object.keys(obj)
            if (keys.length == 0) return "[]"
            return "[\n" + keys.map((k) => {
                var val = obj[k]
                var res;
                switch (typeof (val)) {
                    case 'boolean': res = val ? 'true' : 'false'; break;
                    case 'number': res = val; break;
                    case 'string': res = `"${val}"`; break;
                    case 'object': res = val instanceof Array ? this.code_list(val, ind + 1) : this.code_object(val, ind + 1); break;
                    default: res = 'unknown type';
                }
                return "    ".repeat(ind + 1) + `"${k}" => ${res}`
            })
                .join(",\n")
                + "\n" + "    ".repeat(ind) + "]"
        },
        slugify(event) {
            event.target.value = event.target.value.replace(" ", "-")
        },
        toggle(target, checked, value) {
            if (checked) {
                target.push(value)
            } else {
                let i = target.indexOf(value)
                target.splice(i, 1)
            }
        },
        editCPT(index) {
            this.cpt_i = index;
            // Show the modal
            cptModal.show()
        },
        createCPT() {
            cptModal = new bootstrap.Modal('#cpt_modal', {})

            this.cpt.push({
                "slug": "post-type-" + (this.cpt.length + 1),
                "icon": "admin-post",
                "options-pages": [],
                "taxonomies": [],
                "disable_yoast": false,
                "options": {
                    'show_in_nav_menus': true,
                    'supports': ['title', 'editor', 'thumbnail'],
                    'rewrite': false,
                    'rewrite_opt': {
                        'pages': true,
                        'with_front': true,
                    },
                    'labels': {},
                },
            })

            this.editCPT(this.cpt.length - 1)
        },
        uploaded(event) {

            // Unhighlight
            event.target.removeAttribute('drop-active')

            let file = event.target.files[0]

            if (!file) return

            var reader = new FileReader();
            reader.readAsText(file);

            // Wait for the file to be read
            reader.onload = (readerEvent) => {
                var content = readerEvent.target.result.replace('<?php', '');

                try {
                    let obj = parsePhp(content);
                    console.log(JSON.stringify(obj));
                    this.excerpt_length = obj["excerpt-length"] ?? 100;
                    this.guest_class = obj["guest-class"] ?? 'guest-class';

                    for (const key in this.enable) {
                        this.enable[key] = obj["enable"].includes(key);
                    }
                    for (const key in this.disable) {
                        this.disable[key] = obj["disable"].includes(key);
                    }

                    this.menu_locations = obj["menu-locations"] ?? [];
                    this.options_pages = obj["options-pages"] ?? [];
                    this.cpt_i = null;

                    for (var pt of obj["custom-post-types"]) {
                        if (pt["options"]["rewrite"] != false) {
                            pt["options"]["rewrite_opt"] = pt["options"]["rewrite"]
                            pt["options"]["rewrite"] = true
                        } else {
                            pt["options"]["rewrite_opt"] = {
                                'pages': true,
                                'with_front': true,
                            }
                        }
                        if (!pt["options"]["labels"])
                            pt["options"]["labels"] = {}

                        // Merge other values in case they're blank
                        pt = {
                            ...{
                                "icon": "admin-post",
                                "options-pages": [],
                                "taxonomies": [],
                                "disable_yoast": false,
                            }, ...pt
                        };
                    }

                    this.cpt = obj["custom-post-types"]

                } catch (err) {
                    window.alert("Failed to parse the file. Please ensure it follows the format outlined in the documentation.")
                }
            }
        }
    }
}).mount('#v-config-generator')

