import { createApp } from 'vue/dist/vue.esm-browser.prod.js';
import hljs from 'highlight.js';

var cptModal;

let vueApp = createApp({
    delimiters: ['[[', ']]'],
    data() {
        return {
            excerpt_length: 100,
            guest_class: "guest",
            cpt: [],
            cpt_i: null,
            enable: {
                "post-thumbnails": false,
                "menus": false,
                "styleselect": false,
            },
            disable: {
                "editor": false,
                "customizer": false,
                "gutenberg": false,
            },
            options_pages: [],
            options_pages_field: "",
            menu_locations: { "main-nav": "Main Nav" },
            menu_locations_field: ["", ""],
            dashicons: [],
            /*
            Generated by running this JS in inspect element on https://developer.wordpress.org/reference/functions/get_post_type_labels/
            [...jQuery("section > ul")[0].children].map(el => ({
                "key": el.innerText.split(" – ")[0],
                "desc": el.innerText.split(" – ")[1].split(" Default is ")[0],
                "default": (/Default is \‘([^’]+)\’/gm.exec(el.innerText) ?? [null,null])[1],
            }))
            */
            available_labels: [
                {
                    "key": "name",
                    "desc": "General name for the post type, usually plural. The same and overridden by $post_type_object->label.",
                    "default": "Posts"
                },
                {
                    "key": "singular_name",
                    "desc": "Name for one object of this post type.",
                    "default": "Post"
                },
                {
                    "key": "add_new",
                    "desc": "Default is ‘Add New’ for both hierarchical and non-hierarchical types.",
                    "default": "Add New"
                },
                {
                    "key": "add_new_item",
                    "desc": "Label for adding a new singular item.",
                    "default": "Add New Post"
                },
                {
                    "key": "edit_item",
                    "desc": "Label for editing a singular item.",
                    "default": "Edit Post"
                },
                {
                    "key": "new_item",
                    "desc": "Label for the new item page title.",
                    "default": "New Post"
                },
                {
                    "key": "view_item",
                    "desc": "Label for viewing a singular item.",
                    "default": "View Post"
                },
                {
                    "key": "view_items",
                    "desc": "Label for viewing post type archives.",
                    "default": "View Posts"
                },
                {
                    "key": "search_items",
                    "desc": "Label for searching plural items.",
                    "default": "Search Posts"
                },
                {
                    "key": "not_found",
                    "desc": "Label used when no items are found.",
                    "default": "No posts found"
                },
                {
                    "key": "not_found_in_trash",
                    "desc": "Label used when no items are in the Trash.",
                    "default": "No posts found in Trash"
                },
                {
                    "key": "parent_item_colon",
                    "desc": "Label used to prefix parents of hierarchical items. Not used on non-hierarchical post types.",
                    "default": "Parent Page:"
                },
                {
                    "key": "all_items",
                    "desc": "Label to signify all items in a submenu link.",
                    "default": "All Posts"
                },
                {
                    "key": "archives",
                    "desc": "Label for archives in nav menus.",
                    "default": "Post Archives"
                },
                {
                    "key": "attributes",
                    "desc": "Label for the attributes meta box.",
                    "default": "Post Attributes"
                },
                {
                    "key": "insert_into_item",
                    "desc": "Label for the media frame button.",
                    "default": "Insert into post"
                },
                {
                    "key": "uploaded_to_this_item",
                    "desc": "Label for the media frame filter.",
                    "default": "Uploaded to this post"
                },
                {
                    "key": "featured_image",
                    "desc": "Label for the featured image meta box title.",
                    "default": "Featured image"
                },
                {
                    "key": "set_featured_image",
                    "desc": "Label for setting the featured image.",
                    "default": "Set featured image"
                },
                {
                    "key": "remove_featured_image",
                    "desc": "Label for removing the featured image.",
                    "default": "Remove featured image"
                },
                {
                    "key": "use_featured_image",
                    "desc": "Label in the media frame for using a featured image.",
                    "default": "Use as featured image"
                },
                {
                    "key": "menu_name",
                    "desc": "Label for the menu name. Default is same as name.",
                    "default": null
                },
                {
                    "key": "filter_items_list",
                    "desc": "Label for the table views hidden heading.",
                    "default": "Filter posts list"
                },
                {
                    "key": "filter_by_date",
                    "desc": "Label for the date filter in list tables.",
                    "default": "Filter by date"
                },
                {
                    "key": "items_list_navigation",
                    "desc": "Label for the table pagination hidden heading.",
                    "default": "Posts list navigation"
                },
                {
                    "key": "items_list",
                    "desc": "Label for the table hidden heading.",
                    "default": "Posts list"
                },
                {
                    "key": "item_published",
                    "desc": "Label used when an item is published.",
                    "default": "Post published."
                },
                {
                    "key": "item_published_privately",
                    "desc": "Label used when an item is published with private visibility.\nDefault is ‘Post published privately.’ / ‘Page published privately.’",
                    "default": "Post published privately."
                },
                {
                    "key": "item_reverted_to_draft",
                    "desc": "Label used when an item is switched to a draft.\nDefault is ‘Post reverted to draft.’ / ‘Page reverted to draft.’",
                    "default": "Post reverted to draft."
                },
                {
                    "key": "item_scheduled",
                    "desc": "Label used when an item is scheduled for publishing.",
                    "default": "Post scheduled."
                },
                {
                    "key": "item_updated",
                    "desc": "Label used when an item is updated.",
                    "default": "Post updated."
                },
                {
                    "key": "item_link",
                    "desc": "Title for a navigation link block variation.",
                    "default": "Post Link"
                },
                {
                    "key": "item_link_description",
                    "desc": "Description for a navigation link block variation.",
                    "default": "A link to a post."
                }
            ]
        }
    },
    async mounted() {
        // Fetch list of dashicons
        let request = await fetch("https://raw.githubusercontent.com/WordPress/dashicons/master/codepoints.json");
        let json = await request.text();
        this.dashicons = Object.keys(JSON.parse(json))
    },
    computed: {
        code() {
            return hljs.highlight(`<?php
            
return [
    "excerpt-length" => ${this.excerpt_length},
    "guest-class" => "${this.guest_class}",
    "enable" => ${this.code_list_from_bools(this.enable, 1)},
    "disable" => ${this.code_list_from_bools(this.disable, 1)},
    "menu-locations" => ${this.code_object(this.menu_locations, 1)},
    "options-pages" => ${this.code_list(this.options_pages, 1)},
    "custom-post-types" => ${this.code_list(this.clean_cpts(), 1)},
];
                `, { language: 'php' }).value
        }
    },
    methods: {
        clean_cpts() {
            return this.cpt.map((cpt_val) => {
                pt = JSON.parse(JSON.stringify(cpt_val));
                // Configure rewrite options
                if (pt["options"]["rewrite"] == true) pt["options"]["rewrite"] = pt["options"]["rewrite_opt"]
                delete pt["options"]["rewrite_opt"];
                // Manage Labels
                let labelCount = 0
                for (const key in pt["options"]["labels"]) {
                    if (pt["options"]["labels"][key] == "")
                        delete pt["options"]["labels"][key]
                    else labelCount++
                }
                if (labelCount == 0) delete pt["options"]["labels"]
                return pt;
            })
        },
        code_list(list, ind) {
            if (list.length == 0) return "[]"
            return "[\n" + list.map((v) => {
                var res;
                switch (typeof (v)) {
                    case 'boolean': res = v ? 'true' : 'false'; break;
                    case 'number': res = v; break;
                    case 'string': res = `"${v}"`; break;
                    case 'object': res = v instanceof Array ? this.code_list(v, ind + 1) : this.code_object(v, ind + 1); break;
                    default: res = 'unknown type';
                }
                return "    ".repeat(ind + 1) + `${res}`
            })
                .join(",\n")
                + "\n" + "    ".repeat(ind) + "]"
        },
        code_list_from_bools(obj, ind) {
            let keys = Object.keys(obj).filter(k => obj[k])
            if (keys.length == 0) return "[]"
            return "[\n" + keys.map(k => "    ".repeat(ind + 1) + `"${k}"`)
                .join(",\n")
                + "\n" + "    ".repeat(ind) + "]"
        },
        code_object(obj, ind) {
            let keys = Object.keys(obj)
            if (keys.length == 0) return "[]"
            return "[\n" + keys.map((k) => {
                var val = obj[k]
                var res;
                switch (typeof (val)) {
                    case 'boolean': res = val ? 'true' : 'false'; break;
                    case 'number': res = val; break;
                    case 'string': res = `"${val}"`; break;
                    case 'object': res = val instanceof Array ? this.code_list(val, ind + 1) : this.code_object(val, ind + 1); break;
                    default: res = 'unknown type';
                }
                return "    ".repeat(ind + 1) + `"${k}" => ${res}`
            })
                .join(",\n")
                + "\n" + "    ".repeat(ind) + "]"
        },
        slugify(event) {
            event.target.value = event.target.value.replace(" ", "-")
        },
        toggle(target, checked, value) {
            if (checked) {
                target.push(value)
            } else {
                let i = target.indexOf(value)
                target.splice(i, 1)
            }
        },
        editCPT(index) {
            this.cpt_i = index;
            // Show the modal
            cptModal.show()
        },
        createCPT() {
            cptModal = new bootstrap.Modal('#cpt_modal', {})

            this.cpt.push({
                "slug": "post-type-" + (this.cpt.length + 1),
                "icon": "admin-post",
                "options-pages": [],
                "taxonomies": [],
                "disable_yoast": false,
                "options": {
                    'show_in_nav_menus': true,
                    'supports': ['title', 'editor', 'thumbnail'],
                    'rewrite': false,
                    'rewrite_opt': {
                        'pages': true,
                        'with_front': true,
                    },
                    'labels': {},
                },
            })

            this.editCPT(this.cpt.length - 1)
        }
    }
}).mount('#v-config-generator')